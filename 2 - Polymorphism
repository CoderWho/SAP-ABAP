🔹 2. Polymorphism (Çok Biçimlilik)
➤ Nedir?
Polymorphism, aynı arayüzü (interface) ya da aynı üst sınıfı (superclass) kullanan farklı nesnelerin, ortak metodlara farklı davranışlar kazandırmasıdır.
Yani:
	• Aynı metod ismi → farklı sınıflar → farklı işler
	• Kodun esnekliği ve genişletilebilirliği artar

🧩 Örnek: ses_cikar() metodu farklı hayvanlarda farklı davranır.
1. Ortak Üst Sınıf:


CLASS lcl_hayvan DEFINITION ABSTRACT.
  PUBLIC SECTION.
    METHODS: ses_cikar ABSTRACT.
ENDCLASS.


2. Farklı Alt Sınıflar:

CLASS lcl_kedi DEFINITION INHERITING FROM lcl_hayvan.
  PUBLIC SECTION.
    METHODS: ses_cikar REDEFINITION.
ENDCLASS.

CLASS lcl_kedi IMPLEMENTATION.
  METHOD ses_cikar.
    WRITE: / 'Miyav!'.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_kopek DEFINITION INHERITING FROM lcl_hayvan.
  PUBLIC SECTION.
    METHODS: ses_cikar REDEFINITION.
ENDCLASS.

CLASS lcl_kopek IMPLEMENTATION.
  METHOD ses_cikar.
    WRITE: / 'Hav Hav!'.
  ENDMETHOD.
ENDCLASS.


3. Polymorphic Kullanım:

START-OF-SELECTION.

  DATA: hayvanlar TYPE STANDARD TABLE OF REF TO lcl_hayvan,
        hayvan   TYPE REF TO lcl_hayvan.

  DATA(kedi) = NEW lcl_kedi( ).
  DATA(kopek) = NEW lcl_kopek( ).

  APPEND kedi TO hayvanlar.
  APPEND kopek TO hayvanlar.

  LOOP AT hayvanlar INTO hayvan.
    hayvan->ses_cikar( ). " Aynı metod, farklı davranış!
  ENDLOOP.

🎯 Ne Oldu Burada?
	• hayvanlar adında, üst sınıf türünden bir tablo tanımladık.
	• Alt sınıfları (kedi, köpek) bu tabloya ekledik.
	• Döngüde hepsi ses_cikar() metodunu çağırdı ama her biri kendi sınıfına özel davrandı.
Bu:
🟢 Kod tekrarını azaltır
🟢 Yeni sınıflar eklense bile mevcut kod çalışmaya devam eder
🟢 Genişlemeye açık, değişime kapalı (SOLID prensipleri: Open/Closed)

🧠 Polymorphism Nerede Kullanılır?
	• UI nesnelerinde: render() gibi metodlar farklı UI elemanlarında farklı çalışabilir.
	• Dosya türlerinde: open_file() metodu farklı formatlara göre davranabilir.
	• ERP süreçlerinde: Farklı şirket tiplerine özel rapor veya işlem davranışları.

