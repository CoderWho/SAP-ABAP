SAP ABAP OO Nedir? Temelden Başlayalım
1. Neden Object-Oriented Programlama?
ABAP’da klasik (procedural) programlamanın yanında, OO programlama (nesne yönelimli) daha modüler, esnek ve bakımı kolay yazılım geliştirmek için kullanılır. Nesne tabanlı programlama, gerçek dünyadaki varlıkları yazılımda nesneler (objects) olarak modellememizi sağlar.

2. Temel Kavramlar
	• Sınıf (Class): Nesnelerin şablonu. Bir nesnenin nasıl davranacağını (metodlar) ve ne bilgileri tutacağını (özellikler, attribute) tanımlar.
	• Nesne (Object): Sınıfın çalışma zamanındaki örneği. Örneğin “Araba” sınıfından “Fiat Egea” nesnesi gibi.
	• Metod (Method): Sınıf içindeki fonksiyonlar. Nesnenin yapabileceği işlemler.
	• Özellik (Attribute): Sınıf içindeki değişkenler, nesnenin sahip olduğu veriler.

ABAP OO Nasıl Yazılır? Basit Bir Örnek

CLASS lcl_araba DEFINITION.
  PUBLIC SECTION.
    METHODS: set_renk IMPORTING iv_renk TYPE string,
             get_renk RETURNING VALUE(rv_renk) TYPE string.
  PRIVATE SECTION.
    DATA mv_renk TYPE string.
ENDCLASS.

CLASS lcl_araba IMPLEMENTATION.
  METHOD set_renk.
    mv_renk = iv_renk.
  ENDMETHOD.

  METHOD get_renk.
    rv_renk = mv_renk.
  ENDMETHOD.
ENDCLASS.

START-OF-SELECTION.
  DATA araba TYPE REF TO lcl_araba.
  CREATE OBJECT araba.
  araba->set_renk( 'Kırmızı' ).
  WRITE: / 'Arabanın rengi:', araba->get_renk( ).


Burada:
	• lcl_araba sınıfı araba nesnesi için tanımlandı.
	• set_renk ile araba rengini ayarlıyoruz.
	• get_renk ile rengi alıyoruz.
	• CREATE OBJECT ile sınıfın nesnesi yaratılıyor.


Daha İleri Seviye: Nesne Yönelimli Kavramlar

1. Inheritance (Kalıtım)
Bir sınıf başka bir sınıfın özelliklerini ve metodlarını miras alır (inherit). Böylece kod tekrarını azaltır ve hiyerarşik yapılar kurarız.
Örnek:

CLASS lcl_araba DEFINITION.
  PUBLIC SECTION.
    METHODS: set_renk IMPORTING iv_renk TYPE string,
             get_renk RETURNING VALUE(rv_renk) TYPE string.
  PRIVATE SECTION.
    DATA mv_renk TYPE string.
ENDCLASS.

CLASS lcl_araba IMPLEMENTATION.
  METHOD set_renk.
    mv_renk = iv_renk.
  ENDMETHOD.
  METHOD get_renk.
    rv_renk = mv_renk.
  ENDMETHOD.
ENDCLASS.

" Spor araba sınıfı araba sınıfından kalıtılıyor
CLASS lcl_spor_araba DEFINITION INHERITING FROM lcl_araba.
  PUBLIC SECTION.
    METHODS: set_hiz IMPORTING iv_hiz TYPE i,
             get_hiz RETURNING VALUE(rv_hiz) TYPE i.
  PRIVATE SECTION.
    DATA mv_hiz TYPE i.
ENDCLASS.

CLASS lcl_spor_araba IMPLEMENTATION.
  METHOD set_hiz.
    mv_hiz = iv_hiz.
  ENDMETHOD.
  METHOD get_hiz.
    rv_hiz = mv_hiz.
  ENDMETHOD.
ENDCLASS.

START-OF-SELECTION.
  DATA spor_araba TYPE REF TO lcl_spor_araba.
  CREATE OBJECT spor_araba.
  spor_araba->set_renk( 'Mavi' ).
  spor_araba->set_hiz( 300 ).
  WRITE: / 'Spor arabanın rengi:', spor_araba->get_renk( ).
  WRITE: / 'Spor arabanın hızı:', spor_araba->get_hiz( ).


Burada lcl_spor_araba sınıfı, lcl_araba sınıfını inherit etti, yani onun özelliklerini ve metodlarını kullanabilir, ayrıca yeni özellikler ekleyebilir.



2. Polymorphism (Çok Biçimlilik)
Aynı isimdeki metodların farklı sınıflarda farklı davranmasıdır.
Örneğin, hem lcl_araba hem lcl_motosiklet sınıfında start_engine() metodu olabilir, ama farklı işler yapar.

3. Abstraction (Soyutlama)
Gerçek dünyadaki karmaşıklığı gizlemek, sadece gerekli detayları sunmak.
ABAP'da abstract class veya abstract method kullanılarak yapılabilir.

4. Interface Nedir? (Arayüz)
Interface, sadece metod imzalarının (sadece isim ve parametrelerin) tanımlandığı bir yapıdır, içinde metodun gövdesi yoktur.
	• Bir sınıf birden fazla interface'i implement edebilir.
	• Interface, farklı sınıflara ortak metodları zorunlu kılar.
Örnek:

INTERFACE if_uyarici.
  METHODS: alert IMPORTING iv_mesaj TYPE string.
ENDINTERFACE.

CLASS lcl_mail_uyarici DEFINITION.
  PUBLIC SECTION.
    INTERFACES if_uyarici.
ENDCLASS.

CLASS lcl_mail_uyarici IMPLEMENTATION.
  METHOD if_uyarici~alert.
    WRITE: / 'Mail Uyarısı:', iv_mesaj.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_sms_uyarici DEFINITION.
  PUBLIC SECTION.
    INTERFACES if_uyarici.
ENDCLASS.

CLASS lcl_sms_uyarici IMPLEMENTATION.
  METHOD if_uyarici~alert.
    WRITE: / 'SMS Uyarısı:', iv_mesaj.
  ENDMETHOD.
ENDCLASS.

START-OF-SELECTION.
  DATA mail_uyarici TYPE REF TO lcl_mail_uyarici.
  CREATE OBJECT mail_uyarici.
  mail_uyarici->if_uyarici~alert( 'Sunucu aşırı yüklendi!' ).

  DATA sms_uyarici TYPE REF TO lcl_sms_uyarici.
  CREATE OBJECT sms_uyarici.
  sms_uyarici->if_uyarici~alert( 'Sunucu aşırı yüklendi!' ).


Burada:
	• if_uyarici interface’i iki farklı sınıf tarafından implement edildi.
	• Her sınıfın alert() metodu kendi işine göre farklı davranabilir.


Özetle SAP ABAP OO'nun Temel Kavramları
Kavram	Ne İşe Yarar?	ABAP Örneği
Sınıf	Nesne şablonu	CLASS lcl_araba DEFINITION.
Nesne	Sınıf örneği	CREATE OBJECT araba.
Metod	Fonksiyon	METHOD set_renk.
Özellik	Veri tutar	DATA mv_renk TYPE string.
Inheritance	Sınıflar arası kalıtım sağlar	INHERITING FROM lcl_araba.
Interface	Metod sözleşmesi, çoklu implementasyon	INTERFACE if_uyarici.


Özetle:
	• ABAP OO ile gerçek dünya nesnelerini yansıtan kodlar yazarsın.
	• Sınıf ve nesne temel yapı taşlarıdır.
	• Inheritance ile kod tekrarından kurtulursun.
	• Interface ile farklı sınıflar ortak bir sözleşmeyi uygular.
	• Metodlar nesnelerin davranışlarını tanımlar.
